// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/19/2023 16:11:40"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ControlUnit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ControlUnit_vlg_sample_tst(
	clk,
	I_data,
	PC_set,
	reset,
	RF_Rp_zero,
	sampler_tx
);
input  clk;
input [15:0] I_data;
input [15:0] PC_set;
input  reset;
input  RF_Rp_zero;
output sampler_tx;

reg sample;
time current_time;
always @(clk or I_data or PC_set or reset or RF_Rp_zero)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ControlUnit_vlg_check_tst (
	ALU_Sel,
	D_addr,
	D_rd,
	D_sel,
	D_wr,
	I_addr,
	I_rd,
	RF_Rp_addr,
	RF_Rp_Ren,
	RF_Rq_addr,
	RF_Rq_Ren,
	RF_Sel,
	RF_W_addr,
	RF_W_Data,
	RF_W_Wen,
	sampler_rx
);
input [1:0] ALU_Sel;
input [7:0] D_addr;
input  D_rd;
input  D_sel;
input  D_wr;
input [15:0] I_addr;
input  I_rd;
input [3:0] RF_Rp_addr;
input  RF_Rp_Ren;
input [3:0] RF_Rq_addr;
input  RF_Rq_Ren;
input [1:0] RF_Sel;
input [3:0] RF_W_addr;
input [7:0] RF_W_Data;
input  RF_W_Wen;
input sampler_rx;

reg [1:0] ALU_Sel_expected;
reg [7:0] D_addr_expected;
reg  D_rd_expected;
reg  D_sel_expected;
reg  D_wr_expected;
reg [15:0] I_addr_expected;
reg  I_rd_expected;
reg [3:0] RF_Rp_addr_expected;
reg  RF_Rp_Ren_expected;
reg [3:0] RF_Rq_addr_expected;
reg  RF_Rq_Ren_expected;
reg [1:0] RF_Sel_expected;
reg [3:0] RF_W_addr_expected;
reg [7:0] RF_W_Data_expected;
reg  RF_W_Wen_expected;

reg [1:0] ALU_Sel_prev;
reg [7:0] D_addr_prev;
reg  D_rd_prev;
reg  D_sel_prev;
reg  D_wr_prev;
reg [15:0] I_addr_prev;
reg  I_rd_prev;
reg [3:0] RF_Rp_addr_prev;
reg  RF_Rp_Ren_prev;
reg [3:0] RF_Rq_addr_prev;
reg  RF_Rq_Ren_prev;
reg [1:0] RF_Sel_prev;
reg [3:0] RF_W_addr_prev;
reg [7:0] RF_W_Data_prev;
reg  RF_W_Wen_prev;

reg [1:0] ALU_Sel_expected_prev;
reg [7:0] D_addr_expected_prev;
reg  D_rd_expected_prev;
reg  D_sel_expected_prev;
reg  D_wr_expected_prev;
reg [15:0] I_addr_expected_prev;
reg  I_rd_expected_prev;
reg [3:0] RF_Rp_addr_expected_prev;
reg  RF_Rp_Ren_expected_prev;
reg [3:0] RF_Rq_addr_expected_prev;
reg  RF_Rq_Ren_expected_prev;
reg [1:0] RF_Sel_expected_prev;
reg [3:0] RF_W_addr_expected_prev;
reg [7:0] RF_W_Data_expected_prev;
reg  RF_W_Wen_expected_prev;

reg [1:0] last_ALU_Sel_exp;
reg [7:0] last_D_addr_exp;
reg  last_D_rd_exp;
reg  last_D_sel_exp;
reg  last_D_wr_exp;
reg [15:0] last_I_addr_exp;
reg  last_I_rd_exp;
reg [3:0] last_RF_Rp_addr_exp;
reg  last_RF_Rp_Ren_exp;
reg [3:0] last_RF_Rq_addr_exp;
reg  last_RF_Rq_Ren_exp;
reg [1:0] last_RF_Sel_exp;
reg [3:0] last_RF_W_addr_exp;
reg [7:0] last_RF_W_Data_exp;
reg  last_RF_W_Wen_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:15] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 15'b1;
end

// update real /o prevs

always @(trigger)
begin
	ALU_Sel_prev = ALU_Sel;
	D_addr_prev = D_addr;
	D_rd_prev = D_rd;
	D_sel_prev = D_sel;
	D_wr_prev = D_wr;
	I_addr_prev = I_addr;
	I_rd_prev = I_rd;
	RF_Rp_addr_prev = RF_Rp_addr;
	RF_Rp_Ren_prev = RF_Rp_Ren;
	RF_Rq_addr_prev = RF_Rq_addr;
	RF_Rq_Ren_prev = RF_Rq_Ren;
	RF_Sel_prev = RF_Sel;
	RF_W_addr_prev = RF_W_addr;
	RF_W_Data_prev = RF_W_Data;
	RF_W_Wen_prev = RF_W_Wen;
end

// update expected /o prevs

always @(trigger)
begin
	ALU_Sel_expected_prev = ALU_Sel_expected;
	D_addr_expected_prev = D_addr_expected;
	D_rd_expected_prev = D_rd_expected;
	D_sel_expected_prev = D_sel_expected;
	D_wr_expected_prev = D_wr_expected;
	I_addr_expected_prev = I_addr_expected;
	I_rd_expected_prev = I_rd_expected;
	RF_Rp_addr_expected_prev = RF_Rp_addr_expected;
	RF_Rp_Ren_expected_prev = RF_Rp_Ren_expected;
	RF_Rq_addr_expected_prev = RF_Rq_addr_expected;
	RF_Rq_Ren_expected_prev = RF_Rq_Ren_expected;
	RF_Sel_expected_prev = RF_Sel_expected;
	RF_W_addr_expected_prev = RF_W_addr_expected;
	RF_W_Data_expected_prev = RF_W_Data_expected;
	RF_W_Wen_expected_prev = RF_W_Wen_expected;
end


// expected ALU_Sel[ 1 ]
initial
begin
	ALU_Sel_expected[1] = 1'bX;
end 
// expected ALU_Sel[ 0 ]
initial
begin
	ALU_Sel_expected[0] = 1'bX;
end 
// expected D_addr[ 7 ]
initial
begin
	D_addr_expected[7] = 1'bX;
end 
// expected D_addr[ 6 ]
initial
begin
	D_addr_expected[6] = 1'bX;
end 
// expected D_addr[ 5 ]
initial
begin
	D_addr_expected[5] = 1'bX;
end 
// expected D_addr[ 4 ]
initial
begin
	D_addr_expected[4] = 1'bX;
end 
// expected D_addr[ 3 ]
initial
begin
	D_addr_expected[3] = 1'bX;
end 
// expected D_addr[ 2 ]
initial
begin
	D_addr_expected[2] = 1'bX;
end 
// expected D_addr[ 1 ]
initial
begin
	D_addr_expected[1] = 1'bX;
end 
// expected D_addr[ 0 ]
initial
begin
	D_addr_expected[0] = 1'bX;
end 

// expected D_rd
initial
begin
	D_rd_expected = 1'bX;
end 

// expected D_sel
initial
begin
	D_sel_expected = 1'bX;
end 

// expected D_wr
initial
begin
	D_wr_expected = 1'bX;
end 
// expected I_addr[ 15 ]
initial
begin
	I_addr_expected[15] = 1'bX;
end 
// expected I_addr[ 14 ]
initial
begin
	I_addr_expected[14] = 1'bX;
end 
// expected I_addr[ 13 ]
initial
begin
	I_addr_expected[13] = 1'bX;
end 
// expected I_addr[ 12 ]
initial
begin
	I_addr_expected[12] = 1'bX;
end 
// expected I_addr[ 11 ]
initial
begin
	I_addr_expected[11] = 1'bX;
end 
// expected I_addr[ 10 ]
initial
begin
	I_addr_expected[10] = 1'bX;
end 
// expected I_addr[ 9 ]
initial
begin
	I_addr_expected[9] = 1'bX;
end 
// expected I_addr[ 8 ]
initial
begin
	I_addr_expected[8] = 1'bX;
end 
// expected I_addr[ 7 ]
initial
begin
	I_addr_expected[7] = 1'bX;
end 
// expected I_addr[ 6 ]
initial
begin
	I_addr_expected[6] = 1'bX;
end 
// expected I_addr[ 5 ]
initial
begin
	I_addr_expected[5] = 1'bX;
end 
// expected I_addr[ 4 ]
initial
begin
	I_addr_expected[4] = 1'bX;
end 
// expected I_addr[ 3 ]
initial
begin
	I_addr_expected[3] = 1'bX;
end 
// expected I_addr[ 2 ]
initial
begin
	I_addr_expected[2] = 1'bX;
end 
// expected I_addr[ 1 ]
initial
begin
	I_addr_expected[1] = 1'bX;
end 
// expected I_addr[ 0 ]
initial
begin
	I_addr_expected[0] = 1'bX;
end 

// expected I_rd
initial
begin
	I_rd_expected = 1'bX;
end 
// expected RF_Rp_addr[ 3 ]
initial
begin
	RF_Rp_addr_expected[3] = 1'bX;
end 
// expected RF_Rp_addr[ 2 ]
initial
begin
	RF_Rp_addr_expected[2] = 1'bX;
end 
// expected RF_Rp_addr[ 1 ]
initial
begin
	RF_Rp_addr_expected[1] = 1'bX;
end 
// expected RF_Rp_addr[ 0 ]
initial
begin
	RF_Rp_addr_expected[0] = 1'bX;
end 

// expected RF_Rp_Ren
initial
begin
	RF_Rp_Ren_expected = 1'bX;
end 
// expected RF_Rq_addr[ 3 ]
initial
begin
	RF_Rq_addr_expected[3] = 1'bX;
end 
// expected RF_Rq_addr[ 2 ]
initial
begin
	RF_Rq_addr_expected[2] = 1'bX;
end 
// expected RF_Rq_addr[ 1 ]
initial
begin
	RF_Rq_addr_expected[1] = 1'bX;
end 
// expected RF_Rq_addr[ 0 ]
initial
begin
	RF_Rq_addr_expected[0] = 1'bX;
end 

// expected RF_Rq_Ren
initial
begin
	RF_Rq_Ren_expected = 1'bX;
end 
// expected RF_Sel[ 1 ]
initial
begin
	RF_Sel_expected[1] = 1'bX;
end 
// expected RF_Sel[ 0 ]
initial
begin
	RF_Sel_expected[0] = 1'bX;
end 
// expected RF_W_addr[ 3 ]
initial
begin
	RF_W_addr_expected[3] = 1'bX;
end 
// expected RF_W_addr[ 2 ]
initial
begin
	RF_W_addr_expected[2] = 1'bX;
end 
// expected RF_W_addr[ 1 ]
initial
begin
	RF_W_addr_expected[1] = 1'bX;
end 
// expected RF_W_addr[ 0 ]
initial
begin
	RF_W_addr_expected[0] = 1'bX;
end 
// expected RF_W_Data[ 7 ]
initial
begin
	RF_W_Data_expected[7] = 1'bX;
end 
// expected RF_W_Data[ 6 ]
initial
begin
	RF_W_Data_expected[6] = 1'bX;
end 
// expected RF_W_Data[ 5 ]
initial
begin
	RF_W_Data_expected[5] = 1'bX;
end 
// expected RF_W_Data[ 4 ]
initial
begin
	RF_W_Data_expected[4] = 1'bX;
end 
// expected RF_W_Data[ 3 ]
initial
begin
	RF_W_Data_expected[3] = 1'bX;
end 
// expected RF_W_Data[ 2 ]
initial
begin
	RF_W_Data_expected[2] = 1'bX;
end 
// expected RF_W_Data[ 1 ]
initial
begin
	RF_W_Data_expected[1] = 1'bX;
end 
// expected RF_W_Data[ 0 ]
initial
begin
	RF_W_Data_expected[0] = 1'bX;
end 

// expected RF_W_Wen
initial
begin
	RF_W_Wen_expected = 1'bX;
end 
// generate trigger
always @(ALU_Sel_expected or ALU_Sel or D_addr_expected or D_addr or D_rd_expected or D_rd or D_sel_expected or D_sel or D_wr_expected or D_wr or I_addr_expected or I_addr or I_rd_expected or I_rd or RF_Rp_addr_expected or RF_Rp_addr or RF_Rp_Ren_expected or RF_Rp_Ren or RF_Rq_addr_expected or RF_Rq_addr or RF_Rq_Ren_expected or RF_Rq_Ren or RF_Sel_expected or RF_Sel or RF_W_addr_expected or RF_W_addr or RF_W_Data_expected or RF_W_Data or RF_W_Wen_expected or RF_W_Wen)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ALU_Sel = %b | expected D_addr = %b | expected D_rd = %b | expected D_sel = %b | expected D_wr = %b | expected I_addr = %b | expected I_rd = %b | expected RF_Rp_addr = %b | expected RF_Rp_Ren = %b | expected RF_Rq_addr = %b | expected RF_Rq_Ren = %b | expected RF_Sel = %b | expected RF_W_addr = %b | expected RF_W_Data = %b | expected RF_W_Wen = %b | ",ALU_Sel_expected_prev,D_addr_expected_prev,D_rd_expected_prev,D_sel_expected_prev,D_wr_expected_prev,I_addr_expected_prev,I_rd_expected_prev,RF_Rp_addr_expected_prev,RF_Rp_Ren_expected_prev,RF_Rq_addr_expected_prev,RF_Rq_Ren_expected_prev,RF_Sel_expected_prev,RF_W_addr_expected_prev,RF_W_Data_expected_prev,RF_W_Wen_expected_prev);
	$display("| real ALU_Sel = %b | real D_addr = %b | real D_rd = %b | real D_sel = %b | real D_wr = %b | real I_addr = %b | real I_rd = %b | real RF_Rp_addr = %b | real RF_Rp_Ren = %b | real RF_Rq_addr = %b | real RF_Rq_Ren = %b | real RF_Sel = %b | real RF_W_addr = %b | real RF_W_Data = %b | real RF_W_Wen = %b | ",ALU_Sel_prev,D_addr_prev,D_rd_prev,D_sel_prev,D_wr_prev,I_addr_prev,I_rd_prev,RF_Rp_addr_prev,RF_Rp_Ren_prev,RF_Rq_addr_prev,RF_Rq_Ren_prev,RF_Sel_prev,RF_W_addr_prev,RF_W_Data_prev,RF_W_Wen_prev);
`endif
	if (
		( ALU_Sel_expected_prev[0] !== 1'bx ) && ( ALU_Sel_prev[0] !== ALU_Sel_expected_prev[0] )
		&& ((ALU_Sel_expected_prev[0] !== last_ALU_Sel_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_Sel[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_Sel_expected_prev);
		$display ("     Real value = %b", ALU_Sel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_Sel_exp[0] = ALU_Sel_expected_prev[0];
	end
	if (
		( ALU_Sel_expected_prev[1] !== 1'bx ) && ( ALU_Sel_prev[1] !== ALU_Sel_expected_prev[1] )
		&& ((ALU_Sel_expected_prev[1] !== last_ALU_Sel_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_Sel[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_Sel_expected_prev);
		$display ("     Real value = %b", ALU_Sel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_Sel_exp[1] = ALU_Sel_expected_prev[1];
	end
	if (
		( D_addr_expected_prev[0] !== 1'bx ) && ( D_addr_prev[0] !== D_addr_expected_prev[0] )
		&& ((D_addr_expected_prev[0] !== last_D_addr_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_addr[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_addr_expected_prev);
		$display ("     Real value = %b", D_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D_addr_exp[0] = D_addr_expected_prev[0];
	end
	if (
		( D_addr_expected_prev[1] !== 1'bx ) && ( D_addr_prev[1] !== D_addr_expected_prev[1] )
		&& ((D_addr_expected_prev[1] !== last_D_addr_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_addr[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_addr_expected_prev);
		$display ("     Real value = %b", D_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D_addr_exp[1] = D_addr_expected_prev[1];
	end
	if (
		( D_addr_expected_prev[2] !== 1'bx ) && ( D_addr_prev[2] !== D_addr_expected_prev[2] )
		&& ((D_addr_expected_prev[2] !== last_D_addr_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_addr[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_addr_expected_prev);
		$display ("     Real value = %b", D_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D_addr_exp[2] = D_addr_expected_prev[2];
	end
	if (
		( D_addr_expected_prev[3] !== 1'bx ) && ( D_addr_prev[3] !== D_addr_expected_prev[3] )
		&& ((D_addr_expected_prev[3] !== last_D_addr_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_addr[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_addr_expected_prev);
		$display ("     Real value = %b", D_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D_addr_exp[3] = D_addr_expected_prev[3];
	end
	if (
		( D_addr_expected_prev[4] !== 1'bx ) && ( D_addr_prev[4] !== D_addr_expected_prev[4] )
		&& ((D_addr_expected_prev[4] !== last_D_addr_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_addr[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_addr_expected_prev);
		$display ("     Real value = %b", D_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D_addr_exp[4] = D_addr_expected_prev[4];
	end
	if (
		( D_addr_expected_prev[5] !== 1'bx ) && ( D_addr_prev[5] !== D_addr_expected_prev[5] )
		&& ((D_addr_expected_prev[5] !== last_D_addr_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_addr[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_addr_expected_prev);
		$display ("     Real value = %b", D_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D_addr_exp[5] = D_addr_expected_prev[5];
	end
	if (
		( D_addr_expected_prev[6] !== 1'bx ) && ( D_addr_prev[6] !== D_addr_expected_prev[6] )
		&& ((D_addr_expected_prev[6] !== last_D_addr_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_addr[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_addr_expected_prev);
		$display ("     Real value = %b", D_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D_addr_exp[6] = D_addr_expected_prev[6];
	end
	if (
		( D_addr_expected_prev[7] !== 1'bx ) && ( D_addr_prev[7] !== D_addr_expected_prev[7] )
		&& ((D_addr_expected_prev[7] !== last_D_addr_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_addr[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_addr_expected_prev);
		$display ("     Real value = %b", D_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D_addr_exp[7] = D_addr_expected_prev[7];
	end
	if (
		( D_rd_expected_prev !== 1'bx ) && ( D_rd_prev !== D_rd_expected_prev )
		&& ((D_rd_expected_prev !== last_D_rd_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_rd :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_rd_expected_prev);
		$display ("     Real value = %b", D_rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D_rd_exp = D_rd_expected_prev;
	end
	if (
		( D_sel_expected_prev !== 1'bx ) && ( D_sel_prev !== D_sel_expected_prev )
		&& ((D_sel_expected_prev !== last_D_sel_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_sel :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_sel_expected_prev);
		$display ("     Real value = %b", D_sel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D_sel_exp = D_sel_expected_prev;
	end
	if (
		( D_wr_expected_prev !== 1'bx ) && ( D_wr_prev !== D_wr_expected_prev )
		&& ((D_wr_expected_prev !== last_D_wr_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_wr :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_wr_expected_prev);
		$display ("     Real value = %b", D_wr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_D_wr_exp = D_wr_expected_prev;
	end
	if (
		( I_addr_expected_prev[0] !== 1'bx ) && ( I_addr_prev[0] !== I_addr_expected_prev[0] )
		&& ((I_addr_expected_prev[0] !== last_I_addr_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_addr[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_addr_expected_prev);
		$display ("     Real value = %b", I_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_I_addr_exp[0] = I_addr_expected_prev[0];
	end
	if (
		( I_addr_expected_prev[1] !== 1'bx ) && ( I_addr_prev[1] !== I_addr_expected_prev[1] )
		&& ((I_addr_expected_prev[1] !== last_I_addr_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_addr[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_addr_expected_prev);
		$display ("     Real value = %b", I_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_I_addr_exp[1] = I_addr_expected_prev[1];
	end
	if (
		( I_addr_expected_prev[2] !== 1'bx ) && ( I_addr_prev[2] !== I_addr_expected_prev[2] )
		&& ((I_addr_expected_prev[2] !== last_I_addr_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_addr[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_addr_expected_prev);
		$display ("     Real value = %b", I_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_I_addr_exp[2] = I_addr_expected_prev[2];
	end
	if (
		( I_addr_expected_prev[3] !== 1'bx ) && ( I_addr_prev[3] !== I_addr_expected_prev[3] )
		&& ((I_addr_expected_prev[3] !== last_I_addr_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_addr[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_addr_expected_prev);
		$display ("     Real value = %b", I_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_I_addr_exp[3] = I_addr_expected_prev[3];
	end
	if (
		( I_addr_expected_prev[4] !== 1'bx ) && ( I_addr_prev[4] !== I_addr_expected_prev[4] )
		&& ((I_addr_expected_prev[4] !== last_I_addr_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_addr[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_addr_expected_prev);
		$display ("     Real value = %b", I_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_I_addr_exp[4] = I_addr_expected_prev[4];
	end
	if (
		( I_addr_expected_prev[5] !== 1'bx ) && ( I_addr_prev[5] !== I_addr_expected_prev[5] )
		&& ((I_addr_expected_prev[5] !== last_I_addr_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_addr[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_addr_expected_prev);
		$display ("     Real value = %b", I_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_I_addr_exp[5] = I_addr_expected_prev[5];
	end
	if (
		( I_addr_expected_prev[6] !== 1'bx ) && ( I_addr_prev[6] !== I_addr_expected_prev[6] )
		&& ((I_addr_expected_prev[6] !== last_I_addr_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_addr[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_addr_expected_prev);
		$display ("     Real value = %b", I_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_I_addr_exp[6] = I_addr_expected_prev[6];
	end
	if (
		( I_addr_expected_prev[7] !== 1'bx ) && ( I_addr_prev[7] !== I_addr_expected_prev[7] )
		&& ((I_addr_expected_prev[7] !== last_I_addr_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_addr[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_addr_expected_prev);
		$display ("     Real value = %b", I_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_I_addr_exp[7] = I_addr_expected_prev[7];
	end
	if (
		( I_addr_expected_prev[8] !== 1'bx ) && ( I_addr_prev[8] !== I_addr_expected_prev[8] )
		&& ((I_addr_expected_prev[8] !== last_I_addr_exp[8]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_addr[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_addr_expected_prev);
		$display ("     Real value = %b", I_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_I_addr_exp[8] = I_addr_expected_prev[8];
	end
	if (
		( I_addr_expected_prev[9] !== 1'bx ) && ( I_addr_prev[9] !== I_addr_expected_prev[9] )
		&& ((I_addr_expected_prev[9] !== last_I_addr_exp[9]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_addr[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_addr_expected_prev);
		$display ("     Real value = %b", I_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_I_addr_exp[9] = I_addr_expected_prev[9];
	end
	if (
		( I_addr_expected_prev[10] !== 1'bx ) && ( I_addr_prev[10] !== I_addr_expected_prev[10] )
		&& ((I_addr_expected_prev[10] !== last_I_addr_exp[10]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_addr[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_addr_expected_prev);
		$display ("     Real value = %b", I_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_I_addr_exp[10] = I_addr_expected_prev[10];
	end
	if (
		( I_addr_expected_prev[11] !== 1'bx ) && ( I_addr_prev[11] !== I_addr_expected_prev[11] )
		&& ((I_addr_expected_prev[11] !== last_I_addr_exp[11]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_addr[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_addr_expected_prev);
		$display ("     Real value = %b", I_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_I_addr_exp[11] = I_addr_expected_prev[11];
	end
	if (
		( I_addr_expected_prev[12] !== 1'bx ) && ( I_addr_prev[12] !== I_addr_expected_prev[12] )
		&& ((I_addr_expected_prev[12] !== last_I_addr_exp[12]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_addr[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_addr_expected_prev);
		$display ("     Real value = %b", I_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_I_addr_exp[12] = I_addr_expected_prev[12];
	end
	if (
		( I_addr_expected_prev[13] !== 1'bx ) && ( I_addr_prev[13] !== I_addr_expected_prev[13] )
		&& ((I_addr_expected_prev[13] !== last_I_addr_exp[13]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_addr[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_addr_expected_prev);
		$display ("     Real value = %b", I_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_I_addr_exp[13] = I_addr_expected_prev[13];
	end
	if (
		( I_addr_expected_prev[14] !== 1'bx ) && ( I_addr_prev[14] !== I_addr_expected_prev[14] )
		&& ((I_addr_expected_prev[14] !== last_I_addr_exp[14]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_addr[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_addr_expected_prev);
		$display ("     Real value = %b", I_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_I_addr_exp[14] = I_addr_expected_prev[14];
	end
	if (
		( I_addr_expected_prev[15] !== 1'bx ) && ( I_addr_prev[15] !== I_addr_expected_prev[15] )
		&& ((I_addr_expected_prev[15] !== last_I_addr_exp[15]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_addr[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_addr_expected_prev);
		$display ("     Real value = %b", I_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_I_addr_exp[15] = I_addr_expected_prev[15];
	end
	if (
		( I_rd_expected_prev !== 1'bx ) && ( I_rd_prev !== I_rd_expected_prev )
		&& ((I_rd_expected_prev !== last_I_rd_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port I_rd :: @time = %t",  $realtime);
		$display ("     Expected value = %b", I_rd_expected_prev);
		$display ("     Real value = %b", I_rd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_I_rd_exp = I_rd_expected_prev;
	end
	if (
		( RF_Rp_addr_expected_prev[0] !== 1'bx ) && ( RF_Rp_addr_prev[0] !== RF_Rp_addr_expected_prev[0] )
		&& ((RF_Rp_addr_expected_prev[0] !== last_RF_Rp_addr_exp[0]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Rp_addr[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Rp_addr_expected_prev);
		$display ("     Real value = %b", RF_Rp_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RF_Rp_addr_exp[0] = RF_Rp_addr_expected_prev[0];
	end
	if (
		( RF_Rp_addr_expected_prev[1] !== 1'bx ) && ( RF_Rp_addr_prev[1] !== RF_Rp_addr_expected_prev[1] )
		&& ((RF_Rp_addr_expected_prev[1] !== last_RF_Rp_addr_exp[1]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Rp_addr[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Rp_addr_expected_prev);
		$display ("     Real value = %b", RF_Rp_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RF_Rp_addr_exp[1] = RF_Rp_addr_expected_prev[1];
	end
	if (
		( RF_Rp_addr_expected_prev[2] !== 1'bx ) && ( RF_Rp_addr_prev[2] !== RF_Rp_addr_expected_prev[2] )
		&& ((RF_Rp_addr_expected_prev[2] !== last_RF_Rp_addr_exp[2]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Rp_addr[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Rp_addr_expected_prev);
		$display ("     Real value = %b", RF_Rp_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RF_Rp_addr_exp[2] = RF_Rp_addr_expected_prev[2];
	end
	if (
		( RF_Rp_addr_expected_prev[3] !== 1'bx ) && ( RF_Rp_addr_prev[3] !== RF_Rp_addr_expected_prev[3] )
		&& ((RF_Rp_addr_expected_prev[3] !== last_RF_Rp_addr_exp[3]) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Rp_addr[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Rp_addr_expected_prev);
		$display ("     Real value = %b", RF_Rp_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_RF_Rp_addr_exp[3] = RF_Rp_addr_expected_prev[3];
	end
	if (
		( RF_Rp_Ren_expected_prev !== 1'bx ) && ( RF_Rp_Ren_prev !== RF_Rp_Ren_expected_prev )
		&& ((RF_Rp_Ren_expected_prev !== last_RF_Rp_Ren_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Rp_Ren :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Rp_Ren_expected_prev);
		$display ("     Real value = %b", RF_Rp_Ren_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_RF_Rp_Ren_exp = RF_Rp_Ren_expected_prev;
	end
	if (
		( RF_Rq_addr_expected_prev[0] !== 1'bx ) && ( RF_Rq_addr_prev[0] !== RF_Rq_addr_expected_prev[0] )
		&& ((RF_Rq_addr_expected_prev[0] !== last_RF_Rq_addr_exp[0]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Rq_addr[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Rq_addr_expected_prev);
		$display ("     Real value = %b", RF_Rq_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_RF_Rq_addr_exp[0] = RF_Rq_addr_expected_prev[0];
	end
	if (
		( RF_Rq_addr_expected_prev[1] !== 1'bx ) && ( RF_Rq_addr_prev[1] !== RF_Rq_addr_expected_prev[1] )
		&& ((RF_Rq_addr_expected_prev[1] !== last_RF_Rq_addr_exp[1]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Rq_addr[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Rq_addr_expected_prev);
		$display ("     Real value = %b", RF_Rq_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_RF_Rq_addr_exp[1] = RF_Rq_addr_expected_prev[1];
	end
	if (
		( RF_Rq_addr_expected_prev[2] !== 1'bx ) && ( RF_Rq_addr_prev[2] !== RF_Rq_addr_expected_prev[2] )
		&& ((RF_Rq_addr_expected_prev[2] !== last_RF_Rq_addr_exp[2]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Rq_addr[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Rq_addr_expected_prev);
		$display ("     Real value = %b", RF_Rq_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_RF_Rq_addr_exp[2] = RF_Rq_addr_expected_prev[2];
	end
	if (
		( RF_Rq_addr_expected_prev[3] !== 1'bx ) && ( RF_Rq_addr_prev[3] !== RF_Rq_addr_expected_prev[3] )
		&& ((RF_Rq_addr_expected_prev[3] !== last_RF_Rq_addr_exp[3]) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Rq_addr[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Rq_addr_expected_prev);
		$display ("     Real value = %b", RF_Rq_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_RF_Rq_addr_exp[3] = RF_Rq_addr_expected_prev[3];
	end
	if (
		( RF_Rq_Ren_expected_prev !== 1'bx ) && ( RF_Rq_Ren_prev !== RF_Rq_Ren_expected_prev )
		&& ((RF_Rq_Ren_expected_prev !== last_RF_Rq_Ren_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Rq_Ren :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Rq_Ren_expected_prev);
		$display ("     Real value = %b", RF_Rq_Ren_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_RF_Rq_Ren_exp = RF_Rq_Ren_expected_prev;
	end
	if (
		( RF_Sel_expected_prev[0] !== 1'bx ) && ( RF_Sel_prev[0] !== RF_Sel_expected_prev[0] )
		&& ((RF_Sel_expected_prev[0] !== last_RF_Sel_exp[0]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Sel[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Sel_expected_prev);
		$display ("     Real value = %b", RF_Sel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_RF_Sel_exp[0] = RF_Sel_expected_prev[0];
	end
	if (
		( RF_Sel_expected_prev[1] !== 1'bx ) && ( RF_Sel_prev[1] !== RF_Sel_expected_prev[1] )
		&& ((RF_Sel_expected_prev[1] !== last_RF_Sel_exp[1]) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_Sel[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_Sel_expected_prev);
		$display ("     Real value = %b", RF_Sel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_RF_Sel_exp[1] = RF_Sel_expected_prev[1];
	end
	if (
		( RF_W_addr_expected_prev[0] !== 1'bx ) && ( RF_W_addr_prev[0] !== RF_W_addr_expected_prev[0] )
		&& ((RF_W_addr_expected_prev[0] !== last_RF_W_addr_exp[0]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_addr[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_addr_expected_prev);
		$display ("     Real value = %b", RF_W_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_RF_W_addr_exp[0] = RF_W_addr_expected_prev[0];
	end
	if (
		( RF_W_addr_expected_prev[1] !== 1'bx ) && ( RF_W_addr_prev[1] !== RF_W_addr_expected_prev[1] )
		&& ((RF_W_addr_expected_prev[1] !== last_RF_W_addr_exp[1]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_addr[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_addr_expected_prev);
		$display ("     Real value = %b", RF_W_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_RF_W_addr_exp[1] = RF_W_addr_expected_prev[1];
	end
	if (
		( RF_W_addr_expected_prev[2] !== 1'bx ) && ( RF_W_addr_prev[2] !== RF_W_addr_expected_prev[2] )
		&& ((RF_W_addr_expected_prev[2] !== last_RF_W_addr_exp[2]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_addr[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_addr_expected_prev);
		$display ("     Real value = %b", RF_W_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_RF_W_addr_exp[2] = RF_W_addr_expected_prev[2];
	end
	if (
		( RF_W_addr_expected_prev[3] !== 1'bx ) && ( RF_W_addr_prev[3] !== RF_W_addr_expected_prev[3] )
		&& ((RF_W_addr_expected_prev[3] !== last_RF_W_addr_exp[3]) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_addr[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_addr_expected_prev);
		$display ("     Real value = %b", RF_W_addr_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_RF_W_addr_exp[3] = RF_W_addr_expected_prev[3];
	end
	if (
		( RF_W_Data_expected_prev[0] !== 1'bx ) && ( RF_W_Data_prev[0] !== RF_W_Data_expected_prev[0] )
		&& ((RF_W_Data_expected_prev[0] !== last_RF_W_Data_exp[0]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_Data[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_Data_expected_prev);
		$display ("     Real value = %b", RF_W_Data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_RF_W_Data_exp[0] = RF_W_Data_expected_prev[0];
	end
	if (
		( RF_W_Data_expected_prev[1] !== 1'bx ) && ( RF_W_Data_prev[1] !== RF_W_Data_expected_prev[1] )
		&& ((RF_W_Data_expected_prev[1] !== last_RF_W_Data_exp[1]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_Data[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_Data_expected_prev);
		$display ("     Real value = %b", RF_W_Data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_RF_W_Data_exp[1] = RF_W_Data_expected_prev[1];
	end
	if (
		( RF_W_Data_expected_prev[2] !== 1'bx ) && ( RF_W_Data_prev[2] !== RF_W_Data_expected_prev[2] )
		&& ((RF_W_Data_expected_prev[2] !== last_RF_W_Data_exp[2]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_Data[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_Data_expected_prev);
		$display ("     Real value = %b", RF_W_Data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_RF_W_Data_exp[2] = RF_W_Data_expected_prev[2];
	end
	if (
		( RF_W_Data_expected_prev[3] !== 1'bx ) && ( RF_W_Data_prev[3] !== RF_W_Data_expected_prev[3] )
		&& ((RF_W_Data_expected_prev[3] !== last_RF_W_Data_exp[3]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_Data[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_Data_expected_prev);
		$display ("     Real value = %b", RF_W_Data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_RF_W_Data_exp[3] = RF_W_Data_expected_prev[3];
	end
	if (
		( RF_W_Data_expected_prev[4] !== 1'bx ) && ( RF_W_Data_prev[4] !== RF_W_Data_expected_prev[4] )
		&& ((RF_W_Data_expected_prev[4] !== last_RF_W_Data_exp[4]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_Data[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_Data_expected_prev);
		$display ("     Real value = %b", RF_W_Data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_RF_W_Data_exp[4] = RF_W_Data_expected_prev[4];
	end
	if (
		( RF_W_Data_expected_prev[5] !== 1'bx ) && ( RF_W_Data_prev[5] !== RF_W_Data_expected_prev[5] )
		&& ((RF_W_Data_expected_prev[5] !== last_RF_W_Data_exp[5]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_Data[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_Data_expected_prev);
		$display ("     Real value = %b", RF_W_Data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_RF_W_Data_exp[5] = RF_W_Data_expected_prev[5];
	end
	if (
		( RF_W_Data_expected_prev[6] !== 1'bx ) && ( RF_W_Data_prev[6] !== RF_W_Data_expected_prev[6] )
		&& ((RF_W_Data_expected_prev[6] !== last_RF_W_Data_exp[6]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_Data[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_Data_expected_prev);
		$display ("     Real value = %b", RF_W_Data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_RF_W_Data_exp[6] = RF_W_Data_expected_prev[6];
	end
	if (
		( RF_W_Data_expected_prev[7] !== 1'bx ) && ( RF_W_Data_prev[7] !== RF_W_Data_expected_prev[7] )
		&& ((RF_W_Data_expected_prev[7] !== last_RF_W_Data_exp[7]) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_Data[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_Data_expected_prev);
		$display ("     Real value = %b", RF_W_Data_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_RF_W_Data_exp[7] = RF_W_Data_expected_prev[7];
	end
	if (
		( RF_W_Wen_expected_prev !== 1'bx ) && ( RF_W_Wen_prev !== RF_W_Wen_expected_prev )
		&& ((RF_W_Wen_expected_prev !== last_RF_W_Wen_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RF_W_Wen :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RF_W_Wen_expected_prev);
		$display ("     Real value = %b", RF_W_Wen_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_RF_W_Wen_exp = RF_W_Wen_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ControlUnit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [15:0] I_data;
reg [15:0] PC_set;
reg reset;
reg RF_Rp_zero;
// wires                                               
wire [1:0] ALU_Sel;
wire [7:0] D_addr;
wire D_rd;
wire D_sel;
wire D_wr;
wire [15:0] I_addr;
wire I_rd;
wire [3:0] RF_Rp_addr;
wire RF_Rp_Ren;
wire [3:0] RF_Rq_addr;
wire RF_Rq_Ren;
wire [1:0] RF_Sel;
wire [3:0] RF_W_addr;
wire [7:0] RF_W_Data;
wire RF_W_Wen;

wire sampler;                             

// assign statements (if any)                          
ControlUnit i1 (
// port map - connection between master ports and signals/registers   
	.ALU_Sel(ALU_Sel),
	.clk(clk),
	.D_addr(D_addr),
	.D_rd(D_rd),
	.D_sel(D_sel),
	.D_wr(D_wr),
	.I_addr(I_addr),
	.I_data(I_data),
	.I_rd(I_rd),
	.PC_set(PC_set),
	.reset(reset),
	.RF_Rp_addr(RF_Rp_addr),
	.RF_Rp_Ren(RF_Rp_Ren),
	.RF_Rp_zero(RF_Rp_zero),
	.RF_Rq_addr(RF_Rq_addr),
	.RF_Rq_Ren(RF_Rq_Ren),
	.RF_Sel(RF_Sel),
	.RF_W_addr(RF_W_addr),
	.RF_W_Data(RF_W_Data),
	.RF_W_Wen(RF_W_Wen)
);

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 
// I_data[ 15 ]
initial
begin
	I_data[15] = 1'b0;
end 
// I_data[ 14 ]
initial
begin
	I_data[14] = 1'b1;
end 
// I_data[ 13 ]
initial
begin
	I_data[13] = 1'b1;
end 
// I_data[ 12 ]
initial
begin
	I_data[12] = 1'b0;
end 
// I_data[ 11 ]
initial
begin
	I_data[11] = 1'b0;
end 
// I_data[ 10 ]
initial
begin
	I_data[10] = 1'b0;
end 
// I_data[ 9 ]
initial
begin
	I_data[9] = 1'b0;
end 
// I_data[ 8 ]
initial
begin
	I_data[8] = 1'b0;
end 
// I_data[ 7 ]
initial
begin
	I_data[7] = 1'b0;
end 
// I_data[ 6 ]
initial
begin
	I_data[6] = 1'b0;
end 
// I_data[ 5 ]
initial
begin
	I_data[5] = 1'b0;
end 
// I_data[ 4 ]
initial
begin
	I_data[4] = 1'b0;
end 
// I_data[ 3 ]
initial
begin
	I_data[3] = 1'b0;
end 
// I_data[ 2 ]
initial
begin
	I_data[2] = 1'b0;
end 
// I_data[ 1 ]
initial
begin
	I_data[1] = 1'b0;
end 
// I_data[ 0 ]
initial
begin
	I_data[0] = 1'b0;
end 
// PC_set[ 15 ]
initial
begin
	PC_set[15] = 1'b0;
end 
// PC_set[ 14 ]
initial
begin
	PC_set[14] = 1'b0;
end 
// PC_set[ 13 ]
initial
begin
	PC_set[13] = 1'b0;
end 
// PC_set[ 12 ]
initial
begin
	PC_set[12] = 1'b0;
end 
// PC_set[ 11 ]
initial
begin
	PC_set[11] = 1'b0;
end 
// PC_set[ 10 ]
initial
begin
	PC_set[10] = 1'b0;
end 
// PC_set[ 9 ]
initial
begin
	PC_set[9] = 1'b0;
end 
// PC_set[ 8 ]
initial
begin
	PC_set[8] = 1'b0;
end 
// PC_set[ 7 ]
initial
begin
	PC_set[7] = 1'b0;
end 
// PC_set[ 6 ]
initial
begin
	PC_set[6] = 1'b0;
end 
// PC_set[ 5 ]
initial
begin
	PC_set[5] = 1'b0;
end 
// PC_set[ 4 ]
initial
begin
	PC_set[4] = 1'b0;
end 
// PC_set[ 3 ]
initial
begin
	PC_set[3] = 1'b0;
end 
// PC_set[ 2 ]
initial
begin
	PC_set[2] = 1'b0;
end 
// PC_set[ 1 ]
initial
begin
	PC_set[1] = 1'b0;
end 
// PC_set[ 0 ]
initial
begin
	PC_set[0] = 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
end 

// RF_Rp_zero
initial
begin
	RF_Rp_zero = 1'b0;
end 

ControlUnit_vlg_sample_tst tb_sample (
	.clk(clk),
	.I_data(I_data),
	.PC_set(PC_set),
	.reset(reset),
	.RF_Rp_zero(RF_Rp_zero),
	.sampler_tx(sampler)
);

ControlUnit_vlg_check_tst tb_out(
	.ALU_Sel(ALU_Sel),
	.D_addr(D_addr),
	.D_rd(D_rd),
	.D_sel(D_sel),
	.D_wr(D_wr),
	.I_addr(I_addr),
	.I_rd(I_rd),
	.RF_Rp_addr(RF_Rp_addr),
	.RF_Rp_Ren(RF_Rp_Ren),
	.RF_Rq_addr(RF_Rq_addr),
	.RF_Rq_Ren(RF_Rq_Ren),
	.RF_Sel(RF_Sel),
	.RF_W_addr(RF_W_addr),
	.RF_W_Data(RF_W_Data),
	.RF_W_Wen(RF_W_Wen),
	.sampler_rx(sampler)
);
endmodule

