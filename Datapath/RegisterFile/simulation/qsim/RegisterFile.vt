// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/18/2023 23:06:51"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    RegisterFile
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module RegisterFile_vlg_sample_tst(
	clk,
	RenP,
	RenQ,
	RP_addr,
	RQ_addr,
	W_addr,
	Wdata,
	Wen,
	sampler_tx
);
input  clk;
input  RenP;
input  RenQ;
input [3:0] RP_addr;
input [3:0] RQ_addr;
input [3:0] W_addr;
input [15:0] Wdata;
input  Wen;
output sampler_tx;

reg sample;
time current_time;
always @(clk or RenP or RenQ or RP_addr or RQ_addr or W_addr or Wdata or Wen)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module RegisterFile_vlg_check_tst (
	RPdata,
	RQdata,
	sampler_rx
);
input [15:0] RPdata;
input [15:0] RQdata;
input sampler_rx;

reg [15:0] RPdata_expected;
reg [15:0] RQdata_expected;

reg [15:0] RPdata_prev;
reg [15:0] RQdata_prev;

reg [15:0] RPdata_expected_prev;
reg [15:0] RQdata_expected_prev;

reg [15:0] last_RPdata_exp;
reg [15:0] last_RQdata_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	RPdata_prev = RPdata;
	RQdata_prev = RQdata;
end

// update expected /o prevs

always @(trigger)
begin
	RPdata_expected_prev = RPdata_expected;
	RQdata_expected_prev = RQdata_expected;
end


// expected RPdata[ 15 ]
initial
begin
	RPdata_expected[15] = 1'bX;
end 
// expected RPdata[ 14 ]
initial
begin
	RPdata_expected[14] = 1'bX;
end 
// expected RPdata[ 13 ]
initial
begin
	RPdata_expected[13] = 1'bX;
end 
// expected RPdata[ 12 ]
initial
begin
	RPdata_expected[12] = 1'bX;
end 
// expected RPdata[ 11 ]
initial
begin
	RPdata_expected[11] = 1'bX;
end 
// expected RPdata[ 10 ]
initial
begin
	RPdata_expected[10] = 1'bX;
end 
// expected RPdata[ 9 ]
initial
begin
	RPdata_expected[9] = 1'bX;
end 
// expected RPdata[ 8 ]
initial
begin
	RPdata_expected[8] = 1'bX;
end 
// expected RPdata[ 7 ]
initial
begin
	RPdata_expected[7] = 1'bX;
end 
// expected RPdata[ 6 ]
initial
begin
	RPdata_expected[6] = 1'bX;
end 
// expected RPdata[ 5 ]
initial
begin
	RPdata_expected[5] = 1'bX;
end 
// expected RPdata[ 4 ]
initial
begin
	RPdata_expected[4] = 1'bX;
end 
// expected RPdata[ 3 ]
initial
begin
	RPdata_expected[3] = 1'bX;
end 
// expected RPdata[ 2 ]
initial
begin
	RPdata_expected[2] = 1'bX;
end 
// expected RPdata[ 1 ]
initial
begin
	RPdata_expected[1] = 1'bX;
end 
// expected RPdata[ 0 ]
initial
begin
	RPdata_expected[0] = 1'bX;
end 
// expected RQdata[ 15 ]
initial
begin
	RQdata_expected[15] = 1'bX;
end 
// expected RQdata[ 14 ]
initial
begin
	RQdata_expected[14] = 1'bX;
end 
// expected RQdata[ 13 ]
initial
begin
	RQdata_expected[13] = 1'bX;
end 
// expected RQdata[ 12 ]
initial
begin
	RQdata_expected[12] = 1'bX;
end 
// expected RQdata[ 11 ]
initial
begin
	RQdata_expected[11] = 1'bX;
end 
// expected RQdata[ 10 ]
initial
begin
	RQdata_expected[10] = 1'bX;
end 
// expected RQdata[ 9 ]
initial
begin
	RQdata_expected[9] = 1'bX;
end 
// expected RQdata[ 8 ]
initial
begin
	RQdata_expected[8] = 1'bX;
end 
// expected RQdata[ 7 ]
initial
begin
	RQdata_expected[7] = 1'bX;
end 
// expected RQdata[ 6 ]
initial
begin
	RQdata_expected[6] = 1'bX;
end 
// expected RQdata[ 5 ]
initial
begin
	RQdata_expected[5] = 1'bX;
end 
// expected RQdata[ 4 ]
initial
begin
	RQdata_expected[4] = 1'bX;
end 
// expected RQdata[ 3 ]
initial
begin
	RQdata_expected[3] = 1'bX;
end 
// expected RQdata[ 2 ]
initial
begin
	RQdata_expected[2] = 1'bX;
end 
// expected RQdata[ 1 ]
initial
begin
	RQdata_expected[1] = 1'bX;
end 
// expected RQdata[ 0 ]
initial
begin
	RQdata_expected[0] = 1'bX;
end 
// generate trigger
always @(RPdata_expected or RPdata or RQdata_expected or RQdata)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected RPdata = %b | expected RQdata = %b | ",RPdata_expected_prev,RQdata_expected_prev);
	$display("| real RPdata = %b | real RQdata = %b | ",RPdata_prev,RQdata_prev);
`endif
	if (
		( RPdata_expected_prev[0] !== 1'bx ) && ( RPdata_prev[0] !== RPdata_expected_prev[0] )
		&& ((RPdata_expected_prev[0] !== last_RPdata_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RPdata[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RPdata_expected_prev);
		$display ("     Real value = %b", RPdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RPdata_exp[0] = RPdata_expected_prev[0];
	end
	if (
		( RPdata_expected_prev[1] !== 1'bx ) && ( RPdata_prev[1] !== RPdata_expected_prev[1] )
		&& ((RPdata_expected_prev[1] !== last_RPdata_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RPdata[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RPdata_expected_prev);
		$display ("     Real value = %b", RPdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RPdata_exp[1] = RPdata_expected_prev[1];
	end
	if (
		( RPdata_expected_prev[2] !== 1'bx ) && ( RPdata_prev[2] !== RPdata_expected_prev[2] )
		&& ((RPdata_expected_prev[2] !== last_RPdata_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RPdata[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RPdata_expected_prev);
		$display ("     Real value = %b", RPdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RPdata_exp[2] = RPdata_expected_prev[2];
	end
	if (
		( RPdata_expected_prev[3] !== 1'bx ) && ( RPdata_prev[3] !== RPdata_expected_prev[3] )
		&& ((RPdata_expected_prev[3] !== last_RPdata_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RPdata[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RPdata_expected_prev);
		$display ("     Real value = %b", RPdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RPdata_exp[3] = RPdata_expected_prev[3];
	end
	if (
		( RPdata_expected_prev[4] !== 1'bx ) && ( RPdata_prev[4] !== RPdata_expected_prev[4] )
		&& ((RPdata_expected_prev[4] !== last_RPdata_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RPdata[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RPdata_expected_prev);
		$display ("     Real value = %b", RPdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RPdata_exp[4] = RPdata_expected_prev[4];
	end
	if (
		( RPdata_expected_prev[5] !== 1'bx ) && ( RPdata_prev[5] !== RPdata_expected_prev[5] )
		&& ((RPdata_expected_prev[5] !== last_RPdata_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RPdata[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RPdata_expected_prev);
		$display ("     Real value = %b", RPdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RPdata_exp[5] = RPdata_expected_prev[5];
	end
	if (
		( RPdata_expected_prev[6] !== 1'bx ) && ( RPdata_prev[6] !== RPdata_expected_prev[6] )
		&& ((RPdata_expected_prev[6] !== last_RPdata_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RPdata[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RPdata_expected_prev);
		$display ("     Real value = %b", RPdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RPdata_exp[6] = RPdata_expected_prev[6];
	end
	if (
		( RPdata_expected_prev[7] !== 1'bx ) && ( RPdata_prev[7] !== RPdata_expected_prev[7] )
		&& ((RPdata_expected_prev[7] !== last_RPdata_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RPdata[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RPdata_expected_prev);
		$display ("     Real value = %b", RPdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RPdata_exp[7] = RPdata_expected_prev[7];
	end
	if (
		( RPdata_expected_prev[8] !== 1'bx ) && ( RPdata_prev[8] !== RPdata_expected_prev[8] )
		&& ((RPdata_expected_prev[8] !== last_RPdata_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RPdata[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RPdata_expected_prev);
		$display ("     Real value = %b", RPdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RPdata_exp[8] = RPdata_expected_prev[8];
	end
	if (
		( RPdata_expected_prev[9] !== 1'bx ) && ( RPdata_prev[9] !== RPdata_expected_prev[9] )
		&& ((RPdata_expected_prev[9] !== last_RPdata_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RPdata[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RPdata_expected_prev);
		$display ("     Real value = %b", RPdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RPdata_exp[9] = RPdata_expected_prev[9];
	end
	if (
		( RPdata_expected_prev[10] !== 1'bx ) && ( RPdata_prev[10] !== RPdata_expected_prev[10] )
		&& ((RPdata_expected_prev[10] !== last_RPdata_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RPdata[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RPdata_expected_prev);
		$display ("     Real value = %b", RPdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RPdata_exp[10] = RPdata_expected_prev[10];
	end
	if (
		( RPdata_expected_prev[11] !== 1'bx ) && ( RPdata_prev[11] !== RPdata_expected_prev[11] )
		&& ((RPdata_expected_prev[11] !== last_RPdata_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RPdata[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RPdata_expected_prev);
		$display ("     Real value = %b", RPdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RPdata_exp[11] = RPdata_expected_prev[11];
	end
	if (
		( RPdata_expected_prev[12] !== 1'bx ) && ( RPdata_prev[12] !== RPdata_expected_prev[12] )
		&& ((RPdata_expected_prev[12] !== last_RPdata_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RPdata[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RPdata_expected_prev);
		$display ("     Real value = %b", RPdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RPdata_exp[12] = RPdata_expected_prev[12];
	end
	if (
		( RPdata_expected_prev[13] !== 1'bx ) && ( RPdata_prev[13] !== RPdata_expected_prev[13] )
		&& ((RPdata_expected_prev[13] !== last_RPdata_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RPdata[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RPdata_expected_prev);
		$display ("     Real value = %b", RPdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RPdata_exp[13] = RPdata_expected_prev[13];
	end
	if (
		( RPdata_expected_prev[14] !== 1'bx ) && ( RPdata_prev[14] !== RPdata_expected_prev[14] )
		&& ((RPdata_expected_prev[14] !== last_RPdata_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RPdata[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RPdata_expected_prev);
		$display ("     Real value = %b", RPdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RPdata_exp[14] = RPdata_expected_prev[14];
	end
	if (
		( RPdata_expected_prev[15] !== 1'bx ) && ( RPdata_prev[15] !== RPdata_expected_prev[15] )
		&& ((RPdata_expected_prev[15] !== last_RPdata_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RPdata[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RPdata_expected_prev);
		$display ("     Real value = %b", RPdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_RPdata_exp[15] = RPdata_expected_prev[15];
	end
	if (
		( RQdata_expected_prev[0] !== 1'bx ) && ( RQdata_prev[0] !== RQdata_expected_prev[0] )
		&& ((RQdata_expected_prev[0] !== last_RQdata_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RQdata[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RQdata_expected_prev);
		$display ("     Real value = %b", RQdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RQdata_exp[0] = RQdata_expected_prev[0];
	end
	if (
		( RQdata_expected_prev[1] !== 1'bx ) && ( RQdata_prev[1] !== RQdata_expected_prev[1] )
		&& ((RQdata_expected_prev[1] !== last_RQdata_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RQdata[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RQdata_expected_prev);
		$display ("     Real value = %b", RQdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RQdata_exp[1] = RQdata_expected_prev[1];
	end
	if (
		( RQdata_expected_prev[2] !== 1'bx ) && ( RQdata_prev[2] !== RQdata_expected_prev[2] )
		&& ((RQdata_expected_prev[2] !== last_RQdata_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RQdata[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RQdata_expected_prev);
		$display ("     Real value = %b", RQdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RQdata_exp[2] = RQdata_expected_prev[2];
	end
	if (
		( RQdata_expected_prev[3] !== 1'bx ) && ( RQdata_prev[3] !== RQdata_expected_prev[3] )
		&& ((RQdata_expected_prev[3] !== last_RQdata_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RQdata[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RQdata_expected_prev);
		$display ("     Real value = %b", RQdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RQdata_exp[3] = RQdata_expected_prev[3];
	end
	if (
		( RQdata_expected_prev[4] !== 1'bx ) && ( RQdata_prev[4] !== RQdata_expected_prev[4] )
		&& ((RQdata_expected_prev[4] !== last_RQdata_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RQdata[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RQdata_expected_prev);
		$display ("     Real value = %b", RQdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RQdata_exp[4] = RQdata_expected_prev[4];
	end
	if (
		( RQdata_expected_prev[5] !== 1'bx ) && ( RQdata_prev[5] !== RQdata_expected_prev[5] )
		&& ((RQdata_expected_prev[5] !== last_RQdata_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RQdata[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RQdata_expected_prev);
		$display ("     Real value = %b", RQdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RQdata_exp[5] = RQdata_expected_prev[5];
	end
	if (
		( RQdata_expected_prev[6] !== 1'bx ) && ( RQdata_prev[6] !== RQdata_expected_prev[6] )
		&& ((RQdata_expected_prev[6] !== last_RQdata_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RQdata[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RQdata_expected_prev);
		$display ("     Real value = %b", RQdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RQdata_exp[6] = RQdata_expected_prev[6];
	end
	if (
		( RQdata_expected_prev[7] !== 1'bx ) && ( RQdata_prev[7] !== RQdata_expected_prev[7] )
		&& ((RQdata_expected_prev[7] !== last_RQdata_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RQdata[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RQdata_expected_prev);
		$display ("     Real value = %b", RQdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RQdata_exp[7] = RQdata_expected_prev[7];
	end
	if (
		( RQdata_expected_prev[8] !== 1'bx ) && ( RQdata_prev[8] !== RQdata_expected_prev[8] )
		&& ((RQdata_expected_prev[8] !== last_RQdata_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RQdata[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RQdata_expected_prev);
		$display ("     Real value = %b", RQdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RQdata_exp[8] = RQdata_expected_prev[8];
	end
	if (
		( RQdata_expected_prev[9] !== 1'bx ) && ( RQdata_prev[9] !== RQdata_expected_prev[9] )
		&& ((RQdata_expected_prev[9] !== last_RQdata_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RQdata[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RQdata_expected_prev);
		$display ("     Real value = %b", RQdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RQdata_exp[9] = RQdata_expected_prev[9];
	end
	if (
		( RQdata_expected_prev[10] !== 1'bx ) && ( RQdata_prev[10] !== RQdata_expected_prev[10] )
		&& ((RQdata_expected_prev[10] !== last_RQdata_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RQdata[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RQdata_expected_prev);
		$display ("     Real value = %b", RQdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RQdata_exp[10] = RQdata_expected_prev[10];
	end
	if (
		( RQdata_expected_prev[11] !== 1'bx ) && ( RQdata_prev[11] !== RQdata_expected_prev[11] )
		&& ((RQdata_expected_prev[11] !== last_RQdata_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RQdata[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RQdata_expected_prev);
		$display ("     Real value = %b", RQdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RQdata_exp[11] = RQdata_expected_prev[11];
	end
	if (
		( RQdata_expected_prev[12] !== 1'bx ) && ( RQdata_prev[12] !== RQdata_expected_prev[12] )
		&& ((RQdata_expected_prev[12] !== last_RQdata_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RQdata[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RQdata_expected_prev);
		$display ("     Real value = %b", RQdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RQdata_exp[12] = RQdata_expected_prev[12];
	end
	if (
		( RQdata_expected_prev[13] !== 1'bx ) && ( RQdata_prev[13] !== RQdata_expected_prev[13] )
		&& ((RQdata_expected_prev[13] !== last_RQdata_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RQdata[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RQdata_expected_prev);
		$display ("     Real value = %b", RQdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RQdata_exp[13] = RQdata_expected_prev[13];
	end
	if (
		( RQdata_expected_prev[14] !== 1'bx ) && ( RQdata_prev[14] !== RQdata_expected_prev[14] )
		&& ((RQdata_expected_prev[14] !== last_RQdata_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RQdata[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RQdata_expected_prev);
		$display ("     Real value = %b", RQdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RQdata_exp[14] = RQdata_expected_prev[14];
	end
	if (
		( RQdata_expected_prev[15] !== 1'bx ) && ( RQdata_prev[15] !== RQdata_expected_prev[15] )
		&& ((RQdata_expected_prev[15] !== last_RQdata_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port RQdata[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", RQdata_expected_prev);
		$display ("     Real value = %b", RQdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_RQdata_exp[15] = RQdata_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module RegisterFile_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg RenP;
reg RenQ;
reg [3:0] RP_addr;
reg [3:0] RQ_addr;
reg [3:0] W_addr;
reg [15:0] Wdata;
reg Wen;
// wires                                               
wire [15:0] RPdata;
wire [15:0] RQdata;

wire sampler;                             

// assign statements (if any)                          
RegisterFile i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.RenP(RenP),
	.RenQ(RenQ),
	.RP_addr(RP_addr),
	.RPdata(RPdata),
	.RQ_addr(RQ_addr),
	.RQdata(RQdata),
	.W_addr(W_addr),
	.Wdata(Wdata),
	.Wen(Wen)
);

// clk
always
begin
	clk = 1'b0;
	clk = #500 1'b1;
	#500;
end 

// RenP
initial
begin
	RenP = 1'b0;
	RenP = #120000 1'b1;
	RenP = #90000 1'b0;
end 

// RenQ
initial
begin
	RenQ = 1'b0;
	RenQ = #120000 1'b1;
	RenQ = #90000 1'b0;
end 
// RP_addr[ 3 ]
initial
begin
	RP_addr[3] = 1'b0;
end 
// RP_addr[ 2 ]
initial
begin
	RP_addr[2] = 1'b0;
end 
// RP_addr[ 1 ]
initial
begin
	RP_addr[1] = 1'b0;
	RP_addr[1] = #150000 1'b1;
	RP_addr[1] = #60000 1'b0;
end 
// RP_addr[ 0 ]
initial
begin
	RP_addr[0] = 1'b0;
	RP_addr[0] = #120000 1'b1;
	RP_addr[0] = #30000 1'b0;
	RP_addr[0] = #30000 1'b1;
	RP_addr[0] = #30000 1'b0;
end 
// RQ_addr[ 3 ]
initial
begin
	RQ_addr[3] = 1'b0;
end 
// RQ_addr[ 2 ]
initial
begin
	RQ_addr[2] = 1'b0;
end 
// RQ_addr[ 1 ]
initial
begin
	RQ_addr[1] = 1'b0;
	RQ_addr[1] = #120000 1'b1;
	RQ_addr[1] = #30000 1'b0;
end 
// RQ_addr[ 0 ]
initial
begin
	RQ_addr[0] = 1'b0;
	RQ_addr[0] = #120000 1'b1;
	RQ_addr[0] = #30000 1'b0;
	RQ_addr[0] = #30000 1'b1;
	RQ_addr[0] = #30000 1'b0;
end 
// W_addr[ 3 ]
initial
begin
	W_addr[3] = 1'b0;
end 
// W_addr[ 2 ]
initial
begin
	W_addr[2] = 1'b0;
end 
// W_addr[ 1 ]
initial
begin
	W_addr[1] = 1'b0;
	W_addr[1] = #60000 1'b1;
	W_addr[1] = #60000 1'b0;
end 
// W_addr[ 0 ]
initial
begin
	W_addr[0] = 1'b0;
	W_addr[0] = #30000 1'b1;
	W_addr[0] = #30000 1'b0;
	W_addr[0] = #30000 1'b1;
	W_addr[0] = #30000 1'b0;
end 
// Wdata[ 15 ]
initial
begin
	Wdata[15] = 1'b0;
end 
// Wdata[ 14 ]
initial
begin
	Wdata[14] = 1'b0;
end 
// Wdata[ 13 ]
initial
begin
	Wdata[13] = 1'b0;
end 
// Wdata[ 12 ]
initial
begin
	Wdata[12] = 1'b0;
end 
// Wdata[ 11 ]
initial
begin
	Wdata[11] = 1'b0;
end 
// Wdata[ 10 ]
initial
begin
	Wdata[10] = 1'b0;
end 
// Wdata[ 9 ]
initial
begin
	Wdata[9] = 1'b0;
end 
// Wdata[ 8 ]
initial
begin
	Wdata[8] = 1'b0;
end 
// Wdata[ 7 ]
initial
begin
	Wdata[7] = 1'b0;
end 
// Wdata[ 6 ]
initial
begin
	Wdata[6] = 1'b0;
end 
// Wdata[ 5 ]
initial
begin
	Wdata[5] = 1'b0;
	Wdata[5] = #960000 1'b1;
end 
// Wdata[ 4 ]
initial
begin
	Wdata[4] = 1'b0;
	Wdata[4] = #480000 1'b1;
	Wdata[4] = #480000 1'b0;
end 
// Wdata[ 3 ]
initial
begin
	repeat(2)
	begin
		Wdata[3] = 1'b0;
		Wdata[3] = #240000 1'b1;
		# 240000;
	end
	Wdata[3] = 1'b0;
end 
// Wdata[ 2 ]
initial
begin
	repeat(4)
	begin
		Wdata[2] = 1'b0;
		Wdata[2] = #120000 1'b1;
		# 120000;
	end
	Wdata[2] = 1'b0;
end 
// Wdata[ 1 ]
initial
begin
	repeat(8)
	begin
		Wdata[1] = 1'b0;
		Wdata[1] = #60000 1'b1;
		# 60000;
	end
	Wdata[1] = 1'b0;
end 
// Wdata[ 0 ]
initial
begin
	repeat(16)
	begin
		Wdata[0] = 1'b0;
		Wdata[0] = #30000 1'b1;
		# 30000;
	end
	Wdata[0] = 1'b0;
	Wdata[0] = #30000 1'b1;
end 

// Wen
initial
begin
	Wen = 1'b0;
	Wen = #30000 1'b1;
	Wen = #90000 1'b0;
end 

RegisterFile_vlg_sample_tst tb_sample (
	.clk(clk),
	.RenP(RenP),
	.RenQ(RenQ),
	.RP_addr(RP_addr),
	.RQ_addr(RQ_addr),
	.W_addr(W_addr),
	.Wdata(Wdata),
	.Wen(Wen),
	.sampler_tx(sampler)
);

RegisterFile_vlg_check_tst tb_out(
	.RPdata(RPdata),
	.RQdata(RQdata),
	.sampler_rx(sampler)
);
endmodule

